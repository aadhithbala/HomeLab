name: streamystats

services:
  # # Database migration service - runs once to set up tables
  # migrate:
  #   image: docker.io/fredrikburmester/streamystats-v2-migrate:${VERSION:-latest}
  #   environment:
  #     - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@vectorchord:5432/${POSTGRES_DB}
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #     - POSTGRES_DB=${POSTGRES_DB}
  #     - PGPASSWORD=${POSTGRES_PASSWORD}
  #   depends_on:
  #     vectorchord:
  #       condition: service_healthy
  #   restart: "no"
  #   networks:
  #     - proxy

  nextjs-app:
    container_name: streamystats
    image: docker.io/fredrikburmester/streamystats-v2-nextjs:${VERSION:-latest}
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@vectorchord:5432/${POSTGRES_DB}
      - JOB_SERVER_URL=http://job-server:3005
      - HOSTNAME=0.0.0.0
    depends_on:
      vectorchord:
        condition: service_healthy
      # migrate:
      #   condition: service_completed_successfully
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:3000/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - proxy

  job-server:
    image: docker.io/fredrikburmester/streamystats-v2-job-server:${VERSION:-latest}
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@vectorchord:5432/${POSTGRES_DB}
      - PORT=3005
    depends_on:
      vectorchord:
        condition: service_healthy
      # migrate:
      #   condition: service_completed_successfully
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:3005/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - proxy

  vectorchord:
    image: tensorchord/vchord-postgres:pg17-v0.4.1
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - vectorchord_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - proxy

volumes:
  vectorchord_data:

networks:
  proxy:
    external: true